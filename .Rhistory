# Skip if test_rets is empty
if(n_obs == 0) next
Wts <- matrix(0, nrow=n_obs, ncol=n_assets)
portRet <- numeric(n_obs)
portPrc <- numeric(n_obs)
portPrc[1] <- 1
Wts[1,] <- w0
for(t in 1:n_obs){
portRet[t] <- sum(Wts[t,] * as.numeric(test_rets[t,]))
portPrc[t] <- ifelse(t==1, 1*(1+portRet[t]), portPrc[t-1]*(1+portRet[t]))
if(t < n_obs){
Wts[t+1,] <- Wts[t,] * (1 + as.numeric(test_rets[t,]))
Wts[t+1,] <- Wts[t+1,] / sum(Wts[t+1,])
}
}
BH_results[[idx]] <- list(
weights=Wts,
asset_names=colnames(test_rets),
portPrc=portPrc,
portRet=portRet,
dates=index(test_rets)
)
}
# ==============================
# 10) Sanity check: final cumulative return
# ==============================
BH_summary <- data.frame(Window=integer(), BH_Return=numeric(), Tangency_Expected=numeric())
for(idx in seq_along(BH_results)){
final_ret <- tail(BH_results[[idx]]$portPrc, 1)
tang_ret <- sum(results[[idx]]$weights * colSums(rets_opt[index(rets_opt) %in% BH_results[[idx]]$dates, ]))
BH_summary <- rbind(BH_summary, data.frame(
Window=idx,
BH_Return=final_ret,
Tangency_Expected=tang_ret
))
}
knitr::kable(BH_summary, digits=4, caption="Buy-and-Hold Cumulative Return vs Tangency Expected Return")
# ==============================
# OOS Sharpe Ratios per Window (Option C)
# ==============================
summary_df$Window <- seq_len(nrow(summary_df))  # add window index
# Out-of-Sample Sharpe Ratios by Window
ggplot(summary_df, aes(x=Window, y=SR_OOS)) +
geom_col(fill="steelblue") +
geom_hline(yintercept=0, linetype="dashed", color="red") +
labs(
title="",
x="Test window", y="Sharpe Ratio (OOS)"
) +
theme_minimal()
library(ggplot2)
# Convert Window to numeric
weights_df$Window <- as.numeric(weights_df$Window)
library(ggplot2)
# Convert Window to numeric
weights_df$Window <- as.numeric(weights_df$Window)
library(ggplot2)
# Convert Window to numeric
weights_df$Window <- as.numeric(weights_df$Window)
library(ggplot2)
# Convert Window to numeric
weights_df$Window <- as.numeric(weights_df$Window)
library(ggplot2)
# Convert Window to numeric
weights_df$Window <- as.numeric(weights_df$Window)
# Compute cumulative wealth for Tangency portfolio
summary_df <- summary_df %>% mutate(CumOOS = cumprod(1 + SR_OOS*0)) # placeholder if you want cumulative returns
# Combine Tangency and BH
BH_cum <- sapply(BH_results, function(x) tail(x$portPrc,1)) # final wealth
tang_cum <- sapply(results, function(x) sum(x$weights * colSums(rets_opt[index(rets_opt) %in% BH_results[[1]]$dates, ])))
plot_df <- data.frame(
Window = seq_along(BH_cum),
BuyHold = BH_cum,
TangencyPortfolio = tang_cum
)
plot_df_long <- pivot_longer(plot_df, cols = c(BH_Wealth, Tangency_Wealth),
names_to="Strategy", values_to="Wealth")
weights_mat <- do.call(rbind, lapply(results, function(x) x$weights))
colnames(weights_mat) <- results[[1]]$assets
rownames(weights_mat) <- paste0("Window_", seq_len(nrow(weights_mat)))
knitr::kable(round(weights_mat, 6), caption="Tangency Portfolio Weights per Training Window (Buy-and-Hold)")
library(ggplot2)
# Convert Window to numeric
summary__df$Window <- as.numeric(summary_df$Window)
library(ggplot2)
# Convert Window to numeric
summary_df$Window <- as.numeric(summary_df$Window)
# Tangency Portfolio Weights (Heatmap) Tangency Portfolio Weights Evolution
ggplot(weights_df, aes(x=Window, y=Asset, fill=Weight)) +
geom_tile(color="white") +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_continuous(breaks = seq(min(weights_df$Window), max(weights_df$Window), by=5)) + # interval of 5
labs(
title="",
x="Training Window", y="Asset", fill="Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
# Convert Window to numeric
summary_df$Window <- as.numeric(summary_df$Window)
# Tangency Portfolio Weights (Heatmap) Tangency Portfolio Weights Evolution
ggplot(summary_df, aes(x=Window, y=Asset, fill=Weight)) +
geom_tile(color="white") +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_continuous(breaks = seq(min(weights_df$Window), max(weights_df$Window), by=5)) + # interval of 5
labs(
title="",
x="Training Window", y="Asset", fill="Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
# Convert Window to numeric
summary_df$Window <- as.numeric(summary_df$Window)
# Tangency Portfolio Weights (Heatmap) Tangency Portfolio Weights Evolution
ggplot(summary_df, aes(x=Window, y=Asset, fill=Weight)) +
geom_tile(color="white") +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_continuous(breaks = seq(min(weights_df$Window), max(summary_df$Window), by=5)) + # interval of 5
labs(
title="",
x="Training Window", y="Asset", fill="Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
# Convert Window to numeric
summary_df$Window <- as.numeric(summary_df$Window)
# Tangency Portfolio Weights (Heatmap) Tangency Portfolio Weights Evolution
ggplot(summary_df, aes(x=Window, y=Asset, fill=Weight)) +
geom_tile(color="white") +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_continuous(breaks = seq(min(summary_df$Window), max(summary_df$Window), by=5)) + # interval of 5
labs(
title="",
x="Training Window", y="Asset", fill="Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1))
# Compute cumulative wealth for Tangency portfolio
summary_df <- summary_df %>% mutate(CumOOS = cumprod(1 + SR_OOS*0)) # placeholder if you want cumulative returns
# Combine Tangency and BH
BH_cum <- sapply(BH_results, function(x) tail(x$portPrc,1)) # final wealth
tang_cum <- sapply(results, function(x) sum(x$weights * colSums(rets_opt[index(rets_opt) %in% BH_results[[1]]$dates, ])))
plot_df <- data.frame(
Window = seq_along(BH_cum),
BuyHold = BH_cum,
TangencyPortfolio = tang_cum
)
plot_df_long <- pivot_longer(plot_df, cols = c(BH_Wealth, Tangency_Wealth),
names_to="Strategy", values_to="Wealth")
# Compute cumulative wealth for Tangency portfolio
summary_df <- summary_df %>% mutate(CumOOS = cumprod(1 + SR_OOS*0)) # placeholder if you want cumulative returns
# Combine Tangency and BH
BH_cum <- sapply(BH_results, function(x) tail(x$portPrc,1)) # final wealth
tang_cum <- sapply(results, function(x) sum(x$weights * colSums(rets_opt[index(rets_opt) %in% BH_results[[1]]$dates, ])))
plot_df <- data.frame(
Window = seq_along(BH_cum),
BuyHold = BH_cum,
TangencyPortfolio = tang_cum
)
plot_df_long <- pivot_longer(plot_df, cols = c(BuyHold, TangencyPortfolio),
names_to="Strategy", values_to="Wealth")
# Out-of-Sample Performance: Tangency vs Buy-and-Hold
ggplot(plot_df_long, aes(x=Window, y=Wealth, color=Strategy)) +
geom_line(size=1.1) +
labs(
title="",
x="Rolling Window",
y="Cumulative Wealth",
color="Strategy"
) +
theme_minimal()
# ==============================
# OOS Sharpe Ratios per Window (Option C)
# ==============================
summary_df$Window <- seq_len(nrow(summary_df))  # add window index
# Out-of-Sample Sharpe Ratios by Window
ggplot(summary_df, aes(x=Window, y=SR_OOS)) +
geom_col(fill="steelblue") +
geom_hline(yintercept=0, linetype="dashed", color="red") +
labs(
title="",
x="Test window", y="Sharpe Ratio (OOS)"
) +
theme_minimal()
# ==============================
# Tangency Portfolio Weights Evolution (Heatmap)
# ==============================
# Convert the list of results into a long dataframe
weights_df <- do.call(rbind, lapply(seq_along(results), function(i) {
n_assets <- length(results[[i]]$weights)
data.frame(
Window = i,                        # numeric window index
Asset  = results[[i]]$assets,      # asset names
Weight = results[[i]]$weights,     # corresponding weights
stringsAsFactors = FALSE
)
}))
# Plot heatmap
ggplot(weights_df, aes(x=Window, y=Asset, fill=Weight)) +
geom_tile(color="white") +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_continuous(
breaks = seq(min(weights_df$Window), max(weights_df$Window), by=5) # interval 5
) +
labs(
title="Tangency Portfolio Weights Evolution",
x="Training Window", y="Asset", fill="Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(weights_df, aes(x=Window, y=Asset, fill=Weight)) +
geom_tile(color="white") +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_continuous(
breaks = seq(min(weights_df$Window), max(weights_df$Window), by=5) # interval 5
) +
labs(
title="",
x="Training Window", y="Asset", fill="Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1))
# Compute cumulative wealth for Tangency portfolio
summary_df <- summary_df %>% mutate(CumOOS = cumprod(1 + SR_OOS*0)) # placeholder if you want cumulative returns
# Combine Tangency and BH
BH_cum <- sapply(BH_results, function(x) tail(x$portPrc,1)) # final wealth
tang_cum <- sapply(results, function(x) sum(x$weights * colSums(rets_opt[index(rets_opt) %in% BH_results[[1]]$dates, ])))
plot_df <- data.frame(
Window = seq_along(BH_cum),
BuyHold = BH_cum,
TangencyPortfolio = tang_cum
)
plot_df_long <- pivot_longer(plot_df, cols = c(BuyHold, TangencyPortfolio),
names_to="Strategy", values_to="Wealth")
# Out-of-Sample Performance: Tangency vs Buy-and-Hold
ggplot(plot_df_long, aes(x=Window, y=Wealth, color=Strategy)) +
geom_line(size=1.1) +
labs(
title="",
x="Rolling Window",
y="Cumulative Wealth",
color="Strategy"
) +
theme_minimal()
weights_mat <- do.call(rbind, lapply(results, function(x) x$weights))
colnames(weights_mat) <- results[[1]]$assets
rownames(weights_mat) <- paste0("Window_", seq_len(nrow(weights_mat)))
knitr::kable(round(weights_mat, 6), caption="Tangency Portfolio Weights per Training Window (Buy-and-Hold)")
## Extract numeric out-of-sample returns safely
OOS_returns <- sapply(results, function(x) {
val <- x$mu_OOS
if(is.null(val) || !is.finite(val)) return(NA)
as.numeric(val)
})
# Remove NAs
OOS_returns <- OOS_returns[!is.na(OOS_returns)]
# Check type
OOS_returns <- as.numeric(OOS_returns)  # ensure numeric vector
# Compute cumulative wealth
cum_OOS <- cumprod(1 + OOS_returns)
# Similarly for Buy-and-Hold
BH_returns <- sapply(BH_results, function(x) {
if(is.null(x$portRet)) return(NA)
mean(as.numeric(x$portRet), na.rm=TRUE)
})
BH_returns <- BH_returns[!is.na(BH_returns)]
BH_returns <- as.numeric(BH_returns)
cum_BH <- cumprod(1 + BH_returns)
## Only keep results with valid numeric mu_OOS
valid_results <- results[sapply(results, function(x) !is.null(x$mu_OOS) && is.finite(x$mu_OOS))]
# Extract end-of-test-period dates as character
plot_dates_char <- sapply(valid_results, function(x) {
tail(strsplit(x$test_period, " / ")[[1]], 1)
})
# Convert to Date class
plot_dates <- as.Date(unlist(plot_dates_char), format="%Y-%m-%d")  # adjust format if needed
# Build plot dataframe
plot_df <- data.frame(
Date     = plot_dates,
Tangency = cum_OOS,
BuyHold  = cum_BH[1:length(cum_OOS)]
)
# Pivot for plotting
library(tidyr)
plot_df_long <- pivot_longer(plot_df, cols=c("Tangency","BuyHold"),
names_to="Strategy", values_to="Cumulative_Wealth")
# Plot
# Cumulative Out-of-Sample Performance
library(ggplot2)
ggplot(plot_df_long, aes(x=Date, y=Cumulative_Wealth, color=Strategy)) +
geom_line(linewidth=0.8) +
labs(title="",
x="Date", y="Cumulative Wealth", color="Strategy") +
scale_color_manual(values=c("blue","red")) +
theme_minimal()
# ==============================
# 10) Sanity check: final cumulative return
# ==============================
BH_summary <- data.frame(Window=integer(), BH_Return=numeric(), Tangency_Expected=numeric())
for(idx in seq_along(BH_results)){
final_ret <- tail(BH_results[[idx]]$portPrc, 1)
tang_ret <- sum(results[[idx]]$weights * colSums(rets_opt[index(rets_opt) %in% BH_results[[idx]]$dates, ]))
BH_summary <- rbind(BH_summary, data.frame(
Window=idx,
BH_Return=final_ret,
Tangency_Expected=tang_ret
))
}
knitr::kable(BH_summary, digits=4, caption="Buy-and-Hold Cumulative Return vs Tangency Expected Return")
summary_df <- do.call(rbind, lapply(results, function(x) data.frame(
train=x$train_period, test=x$test_period,
mu_IS=x$mu_IS, var_IS=x$var_IS, SR_IS=x$SR_IS,
mu_OOS=x$mu_OOS, var_OOS=x$var_OOS, SR_OOS=x$SR_OOS
)))
knitr::kable(summary_df, digits=6, caption="In-sample vs Out-of-sample Portfolio Statistics")
knitr::kable(summary_df, digits=6, caption="In-sample vs Out-of-sample Portfolio Statistics")
library(dplyr)
library(tidyr)
library(ggplot2)
# Ensure dates for test periods (end date of test window)
plot_dates <- as.Date(sapply(summary_df$test, function(x) {
tail(strsplit(x, " / ")[[1]], 1)
}), format = "%Y-%m-%d")  # adjust format if needed
summary_df$Date <- plot_dates
# Reshape into long format for plotting
plot_long <- summary_df %>%
select(Date, mu_IS, var_IS, SR_IS, mu_OOS, var_OOS, SR_OOS) %>%
pivot_longer(-Date, names_to = "Metric", values_to = "Value") %>%
mutate(
Type   = ifelse(grepl("_IS", Metric), "In-Sample", "Out-of-Sample"),
Metric = gsub("_(IS|OOS)", "", Metric)  # clean metric name
)
# Plot IS vs OOS across time
ggplot(plot_long, aes(x = Date, y = Value, color = Metric, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "In-Sample vs Out-of-Sample Portfolio Statistics",
x = "Date", y = "Value",
color = "Measure", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(tidyr)
library(ggplot2)
# Extract test period end date for x-axis
plot_dates <- as.Date(sapply(summary_df$test, function(x) {
tail(strsplit(x, " / ")[[1]], 1)
}), format = "%Y-%m-%d")  # adjust if needed
summary_df$Date <- plot_dates
# Reshape to long format
plot_long <- summary_df %>%
select(Date, mu_IS, var_IS, SR_IS, mu_OOS, var_OOS, SR_OOS) %>%
pivot_longer(-Date, names_to = "Metric", values_to = "Value") %>%
mutate(
Type   = ifelse(grepl("_IS", Metric), "In-Sample", "Out-of-Sample"),
Metric = gsub("_(IS|OOS)", "", Metric)  # keep mu / var / SR clean
)
# ---- Plot 1: Mean & Variance ----
plot1 <- plot_long %>%
filter(Metric %in% c("mu", "var")) %>%
ggplot(aes(x = Date, y = Value, color = Metric, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "In-Sample vs Out-of-Sample Mean & Variance",
x = "Date", y = "Value",
color = "Measure", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = elem
library(dplyr)
library(tidyr)
library(ggplot2)
# Extract test period end date for x-axis
plot_dates <- as.Date(sapply(summary_df$test, function(x) {
tail(strsplit(x, " / ")[[1]], 1)
}), format = "%Y-%m-%d")  # adjust if needed
summary_df$Date <- plot_dates
# Reshape to long format
plot_long <- summary_df %>%
select(Date, mu_IS, var_IS, SR_IS, mu_OOS, var_OOS, SR_OOS) %>%
pivot_longer(-Date, names_to = "Metric", values_to = "Value") %>%
mutate(
Type   = ifelse(grepl("_IS", Metric), "In-Sample", "Out-of-Sample"),
Metric = gsub("_(IS|OOS)", "", Metric)  # keep mu / var / SR clean
)
# ---- Plot 1: Mean & Variance ----
plot1 <- plot_long %>%
filter(Metric %in% c("mu", "var")) %>%
ggplot(aes(x = Date, y = Value, color = Metric, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "In-Sample vs Out-of-Sample Mean & Variance",
x = "Date", y = "Value",
color = "Measure", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ---- Plot 2: Sharpe Ratios ----
plot2 <- plot_long %>%
filter(Metric == "SR") %>%
ggplot(aes(x = Date, y = Value, color = Type, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "In-Sample vs Out-of-Sample Sharpe Ratios",
x = "Date", y = "Sharpe Ratio",
color = "Sample", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display plots
plot1
plot2
library(dplyr)
library(tidyr)
library(ggplot2)
# Extract test period end date for x-axis
plot_dates <- as.Date(sapply(summary_df$test, function(x) {
tail(strsplit(x, " / ")[[1]], 1)
}), format = "%Y-%m-%d")  # adjust if needed
summary_df$Date <- plot_dates
# Reshape to long format
plot_long <- summary_df %>%
select(Date, mu_IS, var_IS, SR_IS, mu_OOS, var_OOS, SR_OOS) %>%
pivot_longer(-Date, names_to = "Metric", values_to = "Value") %>%
mutate(
Type   = ifelse(grepl("_IS", Metric), "In-Sample", "Out-of-Sample"),
Metric = gsub("_(IS|OOS)", "", Metric)  # keep mu / var / SR clean
) %>%
mutate(
Metric = case_when(
Metric == "mu"  ~ "Mean",
Metric == "var" ~ "Variance",TRUE ~ Metric
))
# ---- Plot 1: Mean & Variance ----
plot1 <- plot_long %>%
filter(Metric %in% c("mu", "var")) %>%
ggplot(aes(x = Date, y = Value, color = Metric, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "In-Sample vs Out-of-Sample Mean & Variance",
x = "Date", y = "Value",
color = "Measure", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ---- Plot 2: Sharpe Ratios ----
plot2 <- plot_long %>%
filter(Metric == "SR") %>%
ggplot(aes(x = Date, y = Value, color = Type, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "In-Sample vs Out-of-Sample Sharpe Ratios",
x = "Date", y = "Sharpe Ratio",
color = "Sample", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display plots
plot1
plot2
library(dplyr)
library(tidyr)
library(ggplot2)
# Extract test period end date for x-axis
plot_dates <- as.Date(sapply(summary_df$test, function(x) {
tail(strsplit(x, " / ")[[1]], 1)
}), format = "%Y-%m-%d")  # adjust if needed
summary_df$Date <- plot_dates
# Reshape to long format
plot_long <- summary_df %>%
select(Date, mu_IS, var_IS, SR_IS, mu_OOS, var_OOS, SR_OOS) %>%
pivot_longer(-Date, names_to = "Metric", values_to = "Value") %>%
mutate(
Type   = ifelse(grepl("_IS", Metric), "In-Sample", "Out-of-Sample"),
Metric = gsub("_(IS|OOS)", "", Metric)  # keep mu / var / SR clean
) %>%
mutate(
Metric = case_when(
Metric == "mu"  ~ "Mean",
Metric == "var" ~ "Variance",TRUE ~ Metric
))
# ---- Plot 1: Mean & Variance ----In-Sample vs Out-of-Sample Mean & Variance
plot1 <- plot_long %>%
filter(Metric %in% c("Mean", "Variance")) %>%
ggplot(aes(x = Date, y = Value, color = Metric, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "",
x = "Date", y = "Value",
color = "Measure", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ---- Plot 2: Sharpe Ratios ----In-Sample vs Out-of-Sample Sharpe Ratios
plot2 <- plot_long %>%
filter(Metric == "SR") %>%
ggplot(aes(x = Date, y = Value, color = Type, linetype = Type)) +
geom_line(linewidth = 0.9) +
labs(
title = "",
x = "Date", y = "Sharpe Ratio",
color = "Sample", linetype = "Sample"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display plots
plot1
plot2
